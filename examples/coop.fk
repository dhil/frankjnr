--- start of standard stuff ---
data Maybe X = just X | nothing
data Bool = true | false

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---



{--- Cooperative concurrency ---}

-- cooperative concurrency interface
interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

-- example abstract concurrent computation
test : {[Co [Console], Console]Unit}
test! = print "M1 ";
        fork {print "A1 "; yield!; print "A2 "};
        print "M2 ";
        yield!;
        fork {print "B1 "; yield!; print "B2 "};
        yield!;
        print "M3 ";
        yield!;
        print "\n"

-- queue interface
interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

-- process queue computations
data Proc = proc {[Queue Proc]Unit}

enqProc : {[Queue Proc]Unit} -> [Queue Proc]Unit
enqProc p = enqueue (proc p)

-- return true if the process queue is empty
deqAndRun : {[Queue Proc]Bool}
deqAndRun! = case dequeue! { (just (proc x)) -> x!; false
                           | nothing         ->     true }

runNext : {[Queue Proc]Unit}
runNext! = deqAndRun!; unit

runAll : {[Queue Proc]Unit}
runAll! = case deqAndRun! { false -> runAll!
                          | true  -> unit }

-- implementations of cooperative concurrency

-- defer forked processes
scheduleBF : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
scheduleBF <yield -> k>  = enqProc {scheduleBF (k unit)};
                           runNext!
scheduleBF <fork p -> k> = enqProc {scheduleBF p!};
                           scheduleBF (k unit)
scheduleBF unit          = runAll!

-- eagerly run forked processes
scheduleDF : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
scheduleDF <yield -> k>  = enqProc {scheduleDF (k unit)};
                           runNext!
scheduleDF <fork p -> k> = enqProc {scheduleDF (k unit)};
                           scheduleDF p!
scheduleDF unit          = runAll!


-- queue implementation using a zipper

zq : {List S -> List S -> <Queue S>Unit -> Unit}
zq front        back <enqueue x -> k> = zq front (x :: back) (k unit)
zq []           []   <dequeue -> k>   = zq [] [] (k nothing)
zq []           back <dequeue -> k>   = zq (reverse back) [] (k dequeue!)
zq (x :: front) back <dequeue -> k>   = zq front back (k (just x))
zq front        back unit             = unit

zipQueue : {{[Queue S]Unit} -> Unit}
zipQueue m = zq [] [] m!



main : {[Console]Unit}
main! = print "BF: "; zipQueue {scheduleBF test!};
        print "DF: "; zipQueue {scheduleDF test!}

