--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

--------------------------------------------------------------------------------
-- Queue interface and fast queue implementation
--------------------------------------------------------------------------------

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

-- Execute a computation along with a queue as state (generalisation of
-- zipQueue from coop-factored.fk)
data ZipQueue S = zipq (List S) (List S)

runZipQueue: {{[Queue S]X} -> ZipQueue S -> Pair X (ZipQueue S)}
runZipQueue t q = runZipQueue' t! q

runZipQueue': {<Queue S>X -> ZipQueue S -> Pair X (ZipQueue S)}
runZipQueue' <enqueue q -> k> (zipq ps        qs) = runZipQueue' (k unit)     (zipq ps (q :: qs))
runZipQueue' <dequeue -> k>   (zipq []        []) = runZipQueue' (k nothing)  (zipq [] [])
runZipQueue' <dequeue -> k>   (zipq []        qs) = runZipQueue' (k dequeue!) (zipq (reverse qs) [])
runZipQueue' <dequeue -> k>   (zipq (p :: ps) qs) = runZipQueue' (k (just p)) (zipq ps qs)
runZipQueue' x                (zipq ps        qs) = pair x (zipq ps qs)

evalZipQueue: {{[Queue S]X} -> ZipQueue S -> X}
evalZipQueue t q = case (runZipQueue t q) { (pair x _) -> x }

execZipQueue: {{[Queue S]X} -> ZipQueue S -> ZipQueue S}
execZipQueue t q = case (runZipQueue t q) { (pair _ q) -> q }

emptyZipQueue : {ZipQueue s}
emptyZipQueue! = zipq [] []

evalZipQueueEmpty : {<Queue S>X -> X}
evalZipQueueEmpty <m> = evalZipQueue m (emptyZipQueue!)
evalZipQueueEmpty x   = x

--------------------------------------------------------------------------------
-- Definitions of interfaces, data types
--------------------------------------------------------------------------------

interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

-- Multi-item mailbox
data Mailbox X = mbox (Ref (ZipQueue X))

interface Actor X = spawn Y: {[Actor Y]Unit} -> Mailbox Y
                  | self:    Mailbox X
                  | recv:    X
                  | send Y:  Mailbox Y -> Y -> Unit

data WithSender X Y = withSender (Mailbox X) Y

--------------------------------------------------------------------------------
-- Example actors
--------------------------------------------------------------------------------

doubleActor: {[Actor (WithSender Int Int)]Unit}
doubleActor! = case recv! { (withSender sender n) -> send sender (n + n) }

doubleSpawningActor: {[Actor Int [Console], Console]Unit}
doubleSpawningActor! = let doubler = spawn doubleActor in
                       send doubler (withSender self! 3);
                       case recv! { 6 -> print "you truly know how to double"
                                  | _ -> print "naw" }

divConqActor: {[Actor Int [Console], Console]Unit}
divConqActor! = let doublerA = spawn doubleActor in
                let doublerB = spawn doubleActor in
                send doublerA (withSender self! 1);
                send doublerB (withSender self! 2);
                print "calculating (1+1) + (2+2)... ";
                case (recv! + recv!) { 6 -> print "yay got 6"
                                     | _ -> print "naw" }

soliloquistActor: {[Actor Int [Console], Console]Unit}
soliloquistActor! = send self! 42;
                    case recv! { 42 -> print "ouh how unexpected"
                               | _  -> print "what did I send again?" }

nicePrintActor: {[Actor String [Console], Console]Unit}
nicePrintActor! = let msg = recv! in
                  print "Hey, a message came in: "; print msg

writingActor: {[Actor Int [Console], Console]Unit}
writingActor! = let you = spawn nicePrintActor in
                send you "important msg"

--------------------------------------------------------------------------------
-- Turn an actor step into a process step
--------------------------------------------------------------------------------

step: {Mailbox X -> <Actor X [RefState, Co[RefState]]>Unit -> [RefState, Co [RefState]]Unit}
step mine         <self -> k> = step mine (k mine)
step (mbox mine') <recv -> k> = case (runZipQueue {dequeue!} (read mine'))
                              { (pair nothing _)  -> yield!;
                                                     step (mbox mine') (k recv!)
                              | (pair (just x) q) -> write mine' q;
                                                     step (mbox mine') (k x) }
step mine         <send (mbox yours') x -> k> = let q  = read yours' in
                                            case (execZipQueue {enqueue x} q)
                                            { q' -> write yours' q';
                                                    step mine (k unit) }
step mine         <spawn you -> k> = let yours = mbox (new (zipq [] [])) in
                                     fork {step yours you!};
                                     step mine (k yours)
step mine         x = x

-- This signature suffers from the fact that so far we cannot 'overstep' a handler.
-- Thus all the effects listed within <...> will be 'handled away' (consumed).
-- This restriction shall be overcome in the future.
run : {<RefState, Co [Queue (Proc [RefState]), RefState], Queue (Proc [RefState]), Actor X [Queue (Proc [RefState]), RefState, Co [Queue (Proc [RefState]), RefState]]>Unit -> [RefState]Unit}
run <m>  = evalZipQueueEmpty (roundRobin (step (mbox (new (emptyZipQueue!))) m!))
run unit = unit


--------------------------------------------------------------------------------
-- This is the process executer from coop-factored.fk, using a queue to handle
-- multiple processes
--------------------------------------------------------------------------------

data Proc = proc {[Queue Proc]Unit}

pushProc : {{[Queue Proc]Unit} -> [Queue Proc]Unit}
pushProc p = enqueue (proc p)

popProc : {[Queue Proc]Maybe Unit}
popProc! = case dequeue! { (just (proc x)) -> just x!
                         | nothing         -> nothing }

popProcs : {[Queue Proc]Unit}
popProcs! = case popProc! { (just unit) -> popProcs!
                          | nothing     -> unit }

roundRobin : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
roundRobin <yield -> k>  = pushProc {roundRobin (k unit)}; popProcs!
roundRobin <fork p -> k> = pushProc {roundRobin p!}; roundRobin (k unit)
roundRobin unit          = popProcs!

--------------------------------------------------------------------------------
-- Test an example actor
--------------------------------------------------------------------------------

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/actorMultiMailbox.fk
-- #return calculating (1+1) + (2+2)... yay got 6unit

main: {[Console, RefState]Unit}
main! = run divConqActor!
