--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

-- =============================================================================
-- Description
-- Little Frank library for writing concurrent programs that can synchronise via
-- promises. When a new Async process is spawned, the caller gets a promise
-- object. When the caller wants the spawned process to be finished, it `awaits`
-- the promise. As soon as the spawned process is executed, the calling program
-- is resumed.
-- =============================================================================

--------------------------------------------------------------------------------
-- Queue interface and fast queue implementation
--------------------------------------------------------------------------------

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

-- Execute a computation along with a queue as state (generalisation of
-- zipQueue from coop-factored.fk)
data ZipQueue S = zipq (List S) (List S)

runZipQueue: {{[Queue S]X} -> ZipQueue S -> Pair X (ZipQueue S)}
runZipQueue t q = runZipQueue' t! q

runZipQueue': {<Queue S>X -> ZipQueue S -> Pair X (ZipQueue S)}
runZipQueue' <enqueue q -> k> (zipq ps        qs) = runZipQueue' (k unit)     (zipq ps (q :: qs))
runZipQueue' <dequeue -> k>   (zipq []        []) = runZipQueue' (k nothing)  (zipq [] [])
runZipQueue' <dequeue -> k>   (zipq []        qs) = runZipQueue' (k dequeue!) (zipq (reverse qs) [])
runZipQueue' <dequeue -> k>   (zipq (p :: ps) qs) = runZipQueue' (k (just p)) (zipq ps qs)
runZipQueue' x                (zipq ps        qs) = pair x (zipq ps qs)

evalZipQueue: {{[Queue S]X} -> ZipQueue S -> X}
evalZipQueue t q = case (runZipQueue t q) { (pair x _) -> x }

execZipQueue: {{[Queue S]X} -> ZipQueue S -> ZipQueue S}
execZipQueue t q = case (runZipQueue t q) { (pair _ q) -> q }

--------------------------------------------------------------------------------
-- Definitions of interfaces, data types
--------------------------------------------------------------------------------

interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

data PromiseStatus = done
                   | waiting (List {Unit})

data Promise = promise (Ref PromiseStatus)

interface Async = async: {[Async]Unit} -> Promise
                | await: Promise -> Unit

--------------------------------------------------------------------------------
-- Concurrent Async programs
--------------------------------------------------------------------------------

binOp : {Int -> Int -> Ref Int -> [Async [RefState], RefState]Unit}
binOp m n ref = let v = m + n in
                write ref v

calcProg : {Int -> Int -> Int -> Ref Int -> [Async [RefState], RefState]Unit}
calcProg a b c ref = let ref1 = new 0 in
                     let ref2 = new 0 in
                     let p1 = async {binOp a b ref1} in
                     let p2 = async {binOp b c ref2} in
                     await p1;
                     await p2;
                     write ref (read ref1 + read ref2)

--------------------------------------------------------------------------------
-- Transform a async process step into fork/yield process steps
--------------------------------------------------------------------------------

step: {<Async[RefState, Co[RefState]]>Unit -> [RefState, Co[RefState]]Unit}
step unit = unit
step <async c -> k> = let ref = new (waiting []) in
                      fork { execIfNeeded (promise ref) {step c!} };
                      step (k (promise ref))
step <await (promise ref) -> k> = case (read ref)
                                  { done -> step (k unit)
                                  | (waiting fs) -> let fib = {step (k unit)} in
                                                    write ref (waiting (fib::fs)) }

execIfNeeded: {Promise[RefState, Co[RefState]] -> {[RefState, Co[RefState]]Unit} -> [RefState, Co[RefState]]Unit}
execIfNeeded (promise ref) f = case (read ref)
                               { done -> unit -- should not happen
                               | (waiting []) -> yield!;
                                                 execIfNeeded (promise ref) f
                               | (waiting fs) -> f!;
                                                 write ref done;
                                                 map fork fs;
                                                 unit } -- wake up

--------------------------------------------------------------------------------
-- This is the process executer from coop-factored.fk, using a queue to handle
-- multiple processes
--------------------------------------------------------------------------------

data Proc = proc {[Queue Proc]Unit}

pushProc : {{[Queue Proc]Unit} -> [Queue Proc]Unit}
pushProc p = enqueue (proc p)

popProc : {[Queue Proc]Maybe Unit}
popProc! = case dequeue! { (just (proc x)) -> just x!
                         | nothing         -> nothing }

popProcs : {[Queue Proc]Unit}
popProcs! = case popProc! { (just unit) -> popProcs!
                          | nothing     -> unit }

-- Serialise a queue-tree and return a "queue-manager" in the following way:
-- Given a forkable computation,
-- 1) yield  ==translate==>  push continuation into queue, pop rest of list
-- 2) fork   ==translate==>  push fork into queue, then carry on
-- 3) unit   ==translate==>  pop rest of list
-- roundRobin : {<Co [R | Queue Proc]>Unit -> [R | Queue Proc]Unit}
roundRobin : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
roundRobin <yield -> k>  = pushProc {roundRobin (k unit)}; popProcs!
roundRobin <fork p -> k> = pushProc {roundRobin p!}; roundRobin (k unit)
roundRobin unit          = popProcs!

--------------------------------------------------------------------------------
-- Main
--------------------------------------------------------------------------------

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/asyncUnit.fk
-- #return 8

main: {[RefState]Int}
main! = let ref = new 0 in
        runZipQueue {roundRobin (step (calcProg 1 2 3 ref))} (zipq [] []);
        read ref
