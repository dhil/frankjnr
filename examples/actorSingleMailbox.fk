--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

--------------------------------------------------------------------------------
-- Definitions of interfaces, data types
--------------------------------------------------------------------------------

interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

-- Single item mailbox
data Mailbox X = mbox (Ref (Maybe X))

interface Actor X = spawn Y: {[Actor Y]Unit} -> Mailbox Y
                  | self:    Mailbox X
                  | recv:    X
                  | send Y:  Mailbox Y -> Y -> Unit

data WithSender X Y = withSender (Mailbox X) Y

--------------------------------------------------------------------------------
-- Simple example actors
--------------------------------------------------------------------------------

doubleActor: {[Actor (WithSender Int Int)]Unit}
doubleActor! = case recv! { (withSender sender inp) -> send sender (inp + inp) }

doubleSpawningActor: {[Actor Int [Console], Console]Unit}
doubleSpawningActor! = let doubler = spawn doubleActor in
                       send doubler (withSender self! 3);
                       case recv! { 6 -> print "you truly know how to double"
                                  | _ -> print "naw" }

-- This one would only work with a multi-buffer, not our single-Mailbox.
divConqActor: {Int -> Int -> [Actor Int [Console], Console]Unit}
divConqActor m n = let doublerA = spawn doubleActor in
                   let doublerB = spawn doubleActor in
                   send doublerA (withSender self! m);
                   send doublerB (withSender self! n);
                   print "sent";
                   case (recv! + recv!) { 6 -> print "6"
                                        | _ -> print "naw" }

soliloquistActor: {[Actor Int [Console], Console]Unit}
soliloquistActor! = let me = self! in
                    send me 42;
                    case recv! { 42 -> print "ouh how unexpected"
                               | _  -> print "what did I send again?" }

nicePrintActor: {[Actor String [Console], Console]Unit}
nicePrintActor! = let inp = recv! in
                  print "Hey, a message came in: "; print inp

writingActor: {[Actor Int [Console], Console]Unit}
writingActor! = let you = spawn nicePrintActor in
                send you "important msg"

--------------------------------------------------------------------------------
-- Turn an actor step into a process step
--------------------------------------------------------------------------------

-- step: {Mailbox X -> <Actor X [E|RefState, Co[E|RefState]]>Z -> [E|RefState, Co[E|RefState]]Z}
step: {Mailbox X -> <Actor X [RefState, Co[RefState]]>Unit -> [RefState, Co [RefState]]Unit}
step me         <self -> k> = step me (k me)
step (mbox me') <recv -> k> = case (read me') { nothing  -> yield!;
                                                            step (mbox me') (k recv!)
                                              | (just x) -> write me' nothing;
                                                            step (mbox me') (k x) }
step me         <send (mbox you') x -> k> = write you' (just x);
                                            step me (k unit)
step me         <spawn other -> k> = let you = mbox (new nothing) in
                                     fork {step you other!};
                                     step me (k you)
step me         x = x

--------------------------------------------------------------------------------
-- Two simple process-executers for up to two processes
--------------------------------------------------------------------------------

-- Execute up to two processes. If the 1st one forks, replace the 2nd by fork
duoCoExec: {<Co>Unit -> <Co>Unit -> Unit}
duoCoExec <fork e -> k> _               = duoCoExec (k unit)  e!
duoCoExec <fork e -> k> <_>             = duoCoExec (k unit)  e!
duoCoExec <yield -> _>  <fork e' -> k'> = duoCoExec (k' unit) e'!
duoCoExec <yield -> k>  <yield -> k'>   = duoCoExec (k unit)  (k' unit) -- possibly deadlock
duoCoExec <yield -> k>  unit            = duoCoExec (k unit)  unit      -- possibly deadlock
duoCoExec unit          <fork e' -> k'> = duoCoExec (k' unit) e'!
duoCoExec unit          <yield -> k'>   = duoCoExec (k' unit) unit      -- possibly deadlock
duoCoExec unit          unit            = unit -- done

-- Same as duoCoExec, but only the 1st process is executed, the 2nd is frozen
duoSuspCoExec: {<Co>Unit -> Unit}
duoSuspCoExec <fork e -> k> = duoSuspCoExec' (k unit) e
duoSuspCoExec <yield -> k>  = unit
duoSuspCoExec _             = unit

duoSuspCoExec': {<Co>Unit -> {[Co]Unit} -> Unit}
duoSuspCoExec' <fork e -> k> _  = duoSuspCoExec' (k unit) e
duoSuspCoExec' <yield -> k>  e' = duoSuspCoExec' e'!      {k unit}
duoSuspCoExec' unit          e' = duoSuspCoExec e'!

--------------------------------------------------------------------------------
-- This is the process executer from coop-factored.fk, using a queue to handle
-- multiple processes
--------------------------------------------------------------------------------

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

data Proc = proc {[Queue Proc]Unit}

pushProc : {{[Queue Proc]Unit} -> [Queue Proc]Unit}
pushProc p = enqueue (proc p)

popProc : {[Queue Proc]Maybe Unit}
popProc! = case dequeue! { (just (proc x)) -> just x!
                         | nothing         -> nothing }

popProcs : {[Queue Proc]Unit}
popProcs! = case popProc! { (just unit) -> popProcs!
                          | nothing     -> unit }

-- Serialise a queue-tree and return a "queue-manager" in the following way:
-- Given a forkable computation,
-- 1) yield  ==translate==>  push continuation into queue, pop rest of list
-- 2) fork   ==translate==>  push fork into queue, then carry on
-- 3) unit   ==translate==>  pop rest of list
-- roundRobin : {<Co [R | Queue Proc]>Unit -> [R | Queue Proc]Unit}
roundRobin : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
roundRobin <yield -> k>  = pushProc {roundRobin (k unit)}; popProcs!
roundRobin <fork p -> k> = pushProc {roundRobin p!}; roundRobin (k unit)
roundRobin unit          = popProcs!

-- Execute a queue-manager
zipQueue : {List S -> List S -> <Queue S>Unit -> Unit}
zipQueue ps        qs <enqueue q -> k> = zipQueue ps (q :: qs) (k unit)
zipQueue []        [] <dequeue -> k>   = zipQueue [] [] (k nothing)
zipQueue []        qs <dequeue -> k>   = zipQueue (reverse qs) [] (k dequeue!)
zipQueue (p :: ps) qs <dequeue -> k>   = zipQueue ps qs (k (just p))
zipQueue ps        qs unit             = unit

--------------------------------------------------------------------------------
-- Test doubleSpawningActor example
--------------------------------------------------------------------------------

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/actorSingleMailbox.fk
-- #return you truly know how to doubleunit

main: {[Console, RefState]Unit}
main! = let me = mbox (new nothing) in
        zipQueue [] [] (roundRobin (step me doubleSpawningActor!))
