interface MonoChoice X = choose: {[MonoChoice X]X} -> {[MonoChoice X]X} -> X
-- ...means implicitly:
-- interface MonoChoice X [E] = choose : {[E|MonoChoice X [E|]]X} -> {[E|MonoChoice X [E|]]X} -> X

nondetGreeting: {[MonoChoice String]String}
nondetGreeting! = choose { choose {"Morning!"} {"Guten Morgen!"} }
                         { choose {"Night!"}   {"Gute Nacht!"}   }

alwaysPickLeft: {<MonoChoice Y>X -> X}
alwaysPickLeft <choose a b -> k> = alwaysPickLeft (k a!)
alwaysPickLeft x =                 x

alwaysPickRight: {<MonoChoice Y>X -> X}
alwaysPickRight <choose a b -> k> = alwaysPickRight (k b!)
alwaysPickRight x =                 x

-- Dont delete these lines, they make this program into a unit test.
-- #desc   examples/monoCommands.fk
-- #return "Morning!"

main: {String}
main! = alwaysPickLeft nondetGreeting!
