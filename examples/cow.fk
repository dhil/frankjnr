map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

print : {String -> [Console]Unit}
print s = map ouch s; unit

{-- Andrej Bauer's recursive cow --}
interface Cow = moo : {[Cow,Console]Unit}

cow : {[Cow,Console]Unit}
cow! = (moo!)!

eat : {<Cow>Unit -> [Console]Unit}
eat <moo -> k> = print "Moo "; eat (k cow)
eat unit       = unit

go : {[Console]Unit}
go! = eat cow!






-- just a stub: use --entry-point tX to do something interesting
main : {Unit}
main! = unit

