{--- Cooperative concurrency (factored) ---}

--- start of standard stuff ---
data Maybe X = just X | nothing

map : {{X -> Y} -> List X -> List Y}
map f []        = []
map f (x :: xs) = f x :: map f xs

reverse' : {List X -> List X -> List X}
reverse' []        ys = ys
reverse' (x :: xs) ys = reverse' xs (x :: ys)

reverse : {List X -> List X}
reverse xs = reverse' xs []

print : {String -> [Console]Unit}
print s = map ouch s; unit
--- end of standard stuff ---

interface Co = fork : {[Co]Unit} -> Unit
             | yield : Unit

test : {[Co [Console], Console]Unit}
test! = print "M1 ";
        fork {print "A1 "; yield!; print "A2 "};
        print "M2 ";
        yield!;
        fork {print "B1 "; yield!; print "B2 "};
        yield!;
        print "M3 ";
        yield!;
        print "\n"

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

data Proc = proc {[Queue Proc]Unit}

pushProc : {[Queue Proc]Unit} -> [Queue Proc]Unit
pushProc p = enqueue (proc p)

popProc : {[Queue Proc]Maybe Unit}
popProc! = case dequeue! { (just (proc x)) -> just x!
                         | nothing         -> nothing }

popProcs : {[Queue Proc]Unit}
popProcs! = case popProc! { (just unit) -> popProcs!
                          | nothing     -> unit }

roundRobin : {<Co [Queue Proc]>Unit -> [Queue Proc]Unit}
roundRobin <yield -> k>  = pushProc {roundRobin (k unit)}; popProcs!
roundRobin <fork p -> k> = pushProc {roundRobin p!}; roundRobin (k unit)
roundRobin unit          = popProcs!

zipQueue : {List S -> List S -> <Queue S>Unit -> Unit}
zipQueue ps        qs <enqueue q -> k> = zipQueue ps (q :: qs) (k unit)
zipQueue []        [] <dequeue -> k>   = zipQueue [] [] (k nothing)
zipQueue []        qs <dequeue -> k>   = zipQueue (reverse qs) [] (k dequeue!)
zipQueue (p :: ps) qs <dequeue -> k>   = zipQueue ps qs (k (just p))
zipQueue ps        qs unit             = unit

main : {[Console]Unit}
main! = zipQueue [] [] (roundRobin test!)

