{--- Drunk coin tossing: basic effect handlers ---}

--- start of standard stuff ---
data Maybe X = nothing | just X
data Zero =     -- empty type

on : X -> {X -> Y} -> Y
on x f = f x

if : Bool -> {X} -> {X} -> X
if b t e = on b { true  -> t!
                | false -> e! }

append : List X -> List X -> List X
append []        ys = ys
append (x :: xs) ys = x :: (append xs ys)

concat : List (List X) -> List X
concat []          = []
concat (xs :: xss) = append xs (concat xss)

interface Abort = aborting : Zero

abort : [Abort]X
abort! = case aborting! {}

data Bool = true | false

interface Choice = choice : Bool
--- end of standard stuff ---



--- the drunken tosser

data Toss = Heads | Tails

toss : {[Choice]Toss}
toss! = if choice! {Heads} {Tails}

drunkToss : {[Choice, Abort]Toss}
drunkToss! = if choice! {toss!} {abort!}

drunkTosses : {Int -> [Choice, Abort]List Toss}
drunkTosses 0 = []
drunkTosses n = drunkToss! :: (drunkTosses (n-1))



--- handlers

trueChoice : {<Choice>X -> X}
trueChoice x             = x
trueChoice <choice -> k> = trueChoice (k true)


allChoices : {<Choice>X -> List X}
allChoices x             = [x]
allChoices <choice -> k> = append (allChoices (k true)) (allChoices (k false))


maybeAbort : <Abort>X -> Maybe X
maybeAbort x               = just x
maybeAbort <aborting -> k> = nothing

listAbort : <Abort>X -> List X
listAbort x               = [x]
listAbort <aborting -> k> = []

allResults : <Choice, Abort>X -> List X
allResults x               = [x]
allResults <choice -> k>   = append (allResults (k true)) (allResults (k false))
allResults <aborting -> k> = []


--- tests

t1 : {Toss}
t1! = trueChoice toss!
-- Heads

t2 : {List Toss}
t2! = allChoices toss!
-- [Heads, Tails]

t3 : {Maybe Unit}
t3! = maybeAbort abort!
-- nothing

t4 : {List Unit}
t4! = listAbort abort!
-- []

t5 : {Maybe (List (List Toss))}
t5! = maybeAbort (allChoices (drunkTosses 2))
-- nothing

t6 : {List (Maybe (List Toss))}
t6! = allChoices (maybeAbort (drunkTosses 2))
-- [just ([Heads, Heads]), just ([Heads, Tails]), nothing,
--  just ([Tails, Heads]), just ([Tails, Tails]), nothing, nothing]
--
-- Question: Where do the `nothing's come from?
-- Answer: (head, drop), (tail, drop), (drop, *)
--
-- [TTTT                   TTTF                   TTF*
--  TFTT                   TFTF                   TFF*     F***]

t7 : {List (List Toss)}
t7! = concat (allChoices (listAbort (drunkTosses 2)))
-- [[Heads, Heads], [Heads, Tails], [Tails, Heads], [Tails, Tails]]

t8 : {List (List Toss)}
t8! = concat (listAbort (allChoices (drunkTosses 2)))
-- []

t9 : {List (List Toss)}
t9! = allResults (drunkTosses 2)
-- [[Heads, Heads], [Heads, Tails], [Tails, Heads], [Tails, Tails]]

-- just a stub: use --entry-point tX to do something interesting
main : {List (List Toss)}
main! = allResults (drunkTosses 2)
