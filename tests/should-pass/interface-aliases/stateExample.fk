-- #desc    Little example of defining State in terms of Send, Receive
-- #return  pair 3 3

--- start of standard stuff ---
data Maybe X = nothing | just X
data Pair X Y = pair X Y
data Zero =     -- empty type

on : X -> {X -> Y} -> Y
on x f = f x

if : Bool -> {X} -> {X} -> X
if b t e = on b { true  -> t!
                | false -> e! }

append : List X -> List X -> List X
append []        ys = ys
append (x :: xs) ys = x :: (append xs ys)

concat : List (List X) -> List X
concat []          = []
concat (xs :: xss) = append xs (concat xss)

data Bool = true | false

--- end of standard stuff ---

interface Send X =    send:    X -> Unit
interface Receive X = receive: X
interface State X = [Send X, Receive X]

setAndGet : {Int -> [State Int]Int}
setAndGet n = send n; receive!

-- Input:   init mem. val.,  a program
-- Output:  final mem. val., program result
perfectStateHdr : {Int -> <State Int>Int -> Pair Int Int}
perfectStateHdr val <send n -> k>  = perfectStateHdr n (k unit)
perfectStateHdr val <receive -> k> = perfectStateHdr val (k val)
perfectStateHdr val res            = pair val res

main: {Pair Int Int}
main! = perfectStateHdr 42 (setAndGet 3)
