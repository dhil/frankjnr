-- #desc Examples from the paper
-- #return "do be "
-- Examples from the paper

-- Section 2.1

data Zero =

data Bool = tt | ff

data Nat = zero | suc Nat

data List' X = nil' | cons' X (List' X)

data Pair X Y = pair X Y

append : List X -> List X -> List X
append nil ys = ys
append (cons x xs) ys = cons x (append xs ys)

-- Section 2.2

map : {X -> []Y} -> List X -> []List Y
map f nil = nil
map f (cons x xs) = cons (f x) (map f xs)

-- Section 2.3

fst : X -> Y -> X
fst x y = x

snd : X -> Y -> Y
snd x y = y

if : Bool -> {X} -> {X} -> X
if tt t f = t!
if ff t f = f!

on : X -> {X -> Y} -> Y
on x f = f x

shortAnd : Bool -> {Bool} -> Bool
shortAnd x c = on x {tt -> c! | ff -> ff}

-- Section 2.4

interface Send X = send : X -> Unit

interface Receive X = receive : X

interface State S = get : S
                  | put : S -> Unit

interface Abort = aborting : Zero

abort : [Abort]X
abort! = on aborting! {}

sends : List X -> [Send X]Unit
sends xs = map send xs; unit

--bad : List X -> Unit
--bad xs = map send xs; unit

catter : [Receive (List a)]List a
catter! = on receive! { nil -> nil
                      | xs -> append xs catter!}

next : [State Nat]Nat
next! = fst get! (put (suc get!))

state : S -> <State S>X  -> X
state   _        x        = x
state   s    <get   -> k> = state s (k s)
state   _    <put s -> k> = state s (k unit)

index : List X -> List (Pair Nat X)
index xs = state zero (map {x -> pair next! x} xs)

pipe : <Send X>Unit  -> <Receive X>Y  -> [Abort]Y
pipe   <send x -> s>    <receive -> r> = pipe (s unit) (r x)
pipe        <_>                y       = y
pipe        unit              <_>      = abort!

eg1 : [Abort]List Char
eg1! = pipe (sends (cons "do" (cons "be" (cons "" nil)))) catter!

spacer : [Send (List Char), Receive (List Char)]Unit
spacer! = send receive!; send " "; spacer!


eg2 : [Abort]List Char
eg2! = pipe (sends (cons "do" (cons "be" (cons "" nil))))
            (pipe spacer! catter!)

catch : <Abort>X       -> {X} -> X
catch       x              _  =  x
catch  <aborting -> _>     h  =  h!

main : [Abort]List Char
main! = eg2!
