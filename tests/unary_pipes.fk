{- Shallow encoding of pipes using unary handlers -}

data Bool = True | False
data Nat  = Zero | Suc Nat

interface Yield = yield : Nat -> Unit
interface Await = await : Nat

natFromInt : Int -> Nat
natFromInt 0 = Zero
natFromInt n = Suc (natFromInt (n-1))

add : Nat -> Nat -> Nat
add Zero n = n
add m Zero = m
add (Suc m) (Suc n) = Suc (Suc (add m n))

leb : Nat -> Nat -> Bool
leb Zero (Suc _)    = True
leb (Suc _) Zero    = False
leb (Suc m) (Suc n) = leb m n

up : <Yield>Unit -> {Nat -> [Await]Unit} -> Unit
up x _ = x
up <yield s -> k> cons' = down (cons' s) k

down : <Await>Unit -> {[Yield]Unit} -> Unit
down x _ = x
down <await -> k> prod = up prod! k

snd : X -> Y -> Y
snd x y = y

iffy : Bool -> {X} -> {X} -> X
iffy True t _  = t!
iffy False _ f = f!

produceFrom : Nat -> [Yield]X
produceFrom n = snd (yield n) (produceFrom (Suc n))

take : Nat -> [Await,Yield]Unit
take (Suc (Suc (Suc Zero))) = yield (Suc (Suc (Suc Zero)))
take n = snd (yield (await!)) (take (Suc n))

pipe : {[Yield]Unit} -> {[Await]Unit} -> Unit
pipe x y = up x! y

main : Unit
main! = pipe (produceFrom Zero) (take Zero)
